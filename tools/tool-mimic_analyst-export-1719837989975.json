[{"id":"mimic_analyst","user_id":"170ef720-805f-42be-840c-0c3e576ca6c4","name":"Mimic Analyst","content":"import duckdb\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport json\n\n\nclass Tools:\n    def __init__(self):\n        \"\"\"\n        Initialize the Tools class with the path to the DuckDB database.\n\n        :param db_path: Path to the DuckDB database file.\n        \"\"\"\n        self.connection = duckdb.connect(\n            database=\"/Users/gmcjy/Documents/sourcecode/github/MIMIC-AI/db/mimic4.db\",\n            read_only=True,\n        )\n\n    def show_tables(self) -> str:\n        \"\"\"\n        Show all tables and schemas available in the MIMIC-IV database.\n\n        :return: String containing table and schema information in JSON format.\n        \"\"\"\n        query = \"SELECT * FROM information_schema.tables;\"\n        result = self.connection.execute(query).fetchdf()\n        return result.to_json(orient=\"records\")\n\n    def get_table_schema(self, table_name: str) -> str:\n        \"\"\"\n        Get the schema of a specific table.\n\n        :param table_name: The name of the table.\n        :return: String containing the table schema in JSON format.\n        \"\"\"\n        query = f\"DESCRIBE {table_name};\"\n        result = self.connection.execute(query).fetchdf()\n        return result.to_json(orient=\"records\")\n\n    def analyze_admissions(self) -> str:\n        \"\"\"\n        Analyze the admissions data to show the number of admissions per year.\n\n        :return: String containing the number of admissions per year in JSON format.\n        \"\"\"\n        query = \"\"\"\n        SELECT EXTRACT(YEAR FROM admit_time) AS year, COUNT(*) AS num_admissions\n        FROM mimic_core.admissions\n        GROUP BY year\n        ORDER BY year;\n        \"\"\"\n        result = self.connection.execute(query).fetchdf()\n        return result.to_json(orient=\"records\")\n\n    def plot_query_result(self, query: str, x_col: str, y_col: str, title: str) -> str:\n        \"\"\"\n        Execute a query and plot the result.\n\n        :param query: The SQL query to execute.\n        :param x_col: The column to use for the x-axis.\n        :param y_col: The column to use for the y-axis.\n        :param title: The title of the plot.\n        :return: String indicating the status of the plot.\n        \"\"\"\n        try:\n            df = self.connection.execute(query).fetchdf()\n            plt.figure(figsize=(10, 6))\n            plt.plot(df[x_col], df[y_col], marker=\"o\")\n            plt.title(title)\n            plt.xlabel(x_col)\n            plt.ylabel(y_col)\n            plt.grid(True)\n            plt.show()\n            return \"Plot created successfully.\"\n        except Exception as e:\n            raise\n\n    def analyze_procedures(self, procedure_code: str) -> str:\n        \"\"\"\n        Analyze the data for a specific procedure code.\n\n        :param procedure_code: The procedure code to analyze.\n        :return: String containing procedure analysis results in JSON format.\n        \"\"\"\n        query = f\"\"\"\n        SELECT subject_id, hadm_id, icd_code, seq_num, chartdate\n        FROM mimic_hosp.procedures_icd\n        WHERE icd_code = '{procedure_code}'\n        ORDER BY chartdate;\n        \"\"\"\n        result = self.connection.execute(query).fetchdf()\n        return result.to_json(orient=\"records\")\n\n    def get_patient_statistics(self) -> str:\n        \"\"\"\n        Get statistics about patients, such as average age, gender distribution, and length of stay.\n\n        :return: String containing patient statistics in JSON format.\n        \"\"\"\n        query = \"\"\"\n        SELECT gender, AVG(EXTRACT(YEAR FROM AGE(dob))) AS avg_age, AVG(los) AS avg_los\n        FROM mimic_core.patients p\n        JOIN mimic_core.admissions a ON p.subject_id = a.subject_id\n        GROUP BY gender;\n        \"\"\"\n        result = self.connection.execute(query).fetchdf()\n        return result.to_json(orient=\"records\")\n\n    def execute_query(self, query: str) -> str:\n        \"\"\"\n        Execute a custom query and return the result as a JSON string.\n        Validate the query against the database schema and handle exceptions.\n\n        :param query: The SQL query to execute.\n        :return: String containing the query result in JSON format.\n        :raises: ValueError if the query is invalid or if there is a schema mismatch.\n        \"\"\"\n        try:\n            df = self.connection.execute(query).fetchdf()\n            return df.to_json(orient=\"records\")\n        except Exception as e:\n            raise\n\n    def plot_custom_query(self, query: str, x_col: str, y_col: str, title: str) -> str:\n        \"\"\"\n        Execute a custom query, validate it, and plot the result.\n\n        :param query: The SQL query to execute.\n        :param x_col: The column to use for the x-axis.\n        :param y_col: The column to use for the y-axis.\n        :param title: The title of the plot.\n        :return: String indicating the status of the plot.\n        \"\"\"\n        try:\n            df = self.execute_query(query)\n            df = pd.read_json(df)\n            plt.figure(figsize=(10, 6))\n            plt.plot(df[x_col], df[y_col], marker=\"o\")\n            plt.title(title)\n            plt.xlabel(x_col)\n            plt.ylabel(y_col)\n            plt.grid(True)\n            plt.show()\n            return \"Plot created successfully.\"\n        except Exception as e:\n            raise\n","specs":[{"name":"analyze_admissions","description":"Analyze the admissions data to show the number of admissions per year.","parameters":{"type":"object","properties":{},"required":[]}},{"name":"analyze_procedures","description":"Analyze the data for a specific procedure code.","parameters":{"type":"object","properties":{"procedure_code":{"type":"str","description":"The procedure code to analyze."}},"required":["procedure_code"]}},{"name":"execute_query","description":"Execute a custom query and return the result as a JSON string.","parameters":{"type":"object","properties":{"query":{"type":"str","description":"The SQL query to execute."}},"required":["query"]}},{"name":"get_patient_statistics","description":"Get statistics about patients, such as average age, gender distribution, and length of stay.","parameters":{"type":"object","properties":{},"required":[]}},{"name":"get_table_schema","description":"Get the schema of a specific table.","parameters":{"type":"object","properties":{"table_name":{"type":"str","description":"The name of the table."}},"required":["table_name"]}},{"name":"plot_custom_query","description":"Execute a custom query, validate it, and plot the result.","parameters":{"type":"object","properties":{"query":{"type":"str","description":"The SQL query to execute."},"x_col":{"type":"str","description":"The column to use for the x-axis."},"y_col":{"type":"str","description":"The column to use for the y-axis."},"title":{"type":"str","description":"The title of the plot."}},"required":["query","x_col","y_col","title"]}},{"name":"plot_query_result","description":"Execute a query and plot the result.","parameters":{"type":"object","properties":{"query":{"type":"str","description":"The SQL query to execute."},"x_col":{"type":"str","description":"The column to use for the x-axis."},"y_col":{"type":"str","description":"The column to use for the y-axis."},"title":{"type":"str","description":"The title of the plot."}},"required":["query","x_col","y_col","title"]}},{"name":"show_tables","description":"Show all tables and schemas available in the MIMIC-IV database.","parameters":{"type":"object","properties":{},"required":[]}}],"meta":{"description":"A toolkit for exploring MIMIC-IV Data using DuckDB","manifest":{}},"updated_at":1719834753,"created_at":1719744719}]